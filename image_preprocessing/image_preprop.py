{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "badbe6c0-7b8d-445d-9e07-ff2246ae06b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import matplotlib.image as img\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import cv2\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n",
    "\n",
    "class preprocess():\n",
    "    \n",
    "    def __init__(self,\n",
    "                 path = \"image_path\",\n",
    "                 path2 = \"main_path\",\n",
    "                 path3 = \"preprocessed_image\"):\n",
    "        \n",
    "        self.path = path\n",
    "        self.path2 = path2\n",
    "        self.path3 = path3\n",
    "        \n",
    "    \n",
    "    def normalization(self):\n",
    "        print(\"\\n***BILGILENDIRME***\\nnormalizasyon için alpha ve beta parametreleri normalizasyonun hangi aralıkta yapılacağını belirler\")\n",
    "        \n",
    "        alpha = int(input(\"0-255 arasında alpha parametresi girin:\"))\n",
    "        beta = int(input(\"0-255 arasında beta parametresi girin:\"))\n",
    "        \n",
    "        for i in os.listdir(self.path):\n",
    "            if i == '.ipynb_checkpoints':\n",
    "                continue\n",
    "            else:\n",
    "                os.chdir(self.path)\n",
    "                img = cv2.imread(i)\n",
    "                norm = np.zeros((800,800))\n",
    "                final = cv2.normalize(img,norm,alpha,beta,cv2.NORM_MINMAX, dtype=cv2.CV_32F)\n",
    "                os.chdir(self.path3)\n",
    "                cv2.imwrite(i,final)\n",
    "        os.chdir(self.path2)\n",
    "        \n",
    "        \n",
    "    def gray(self):\n",
    "        \n",
    "        for i in os.listdir(self.path):\n",
    "            if i == '.ipynb_checkpoints':\n",
    "                continue\n",
    "            else:\n",
    "                os.chdir(self.path)\n",
    "                img = cv2.imread(i)\n",
    "                if img.shape[2] == 1:\n",
    "                    print(i + \" is gray scale\")\n",
    "                else:\n",
    "                    final = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n",
    "                    os.chdir(self.path3)\n",
    "                    cv2.imwrite(i,final)\n",
    "        os.chdir(self.path2)\n",
    "        \n",
    "\n",
    "    def resize(self):\n",
    "        width = int(input(\"genişlik seçiniz:\"))\n",
    "        height = int(input(\"yükseklik seçiniz:\"))\n",
    "        dim = (width,height)\n",
    "        \n",
    "        for i in os.listdir(self.path):\n",
    "            if i == '.ipynb_checkpoints':\n",
    "                continue\n",
    "            else:\n",
    "                os.chdir(self.path)\n",
    "                img = cv2.imread(i)\n",
    "                resized = cv2.resize(img,dim,interpolation = cv2.INTER_AREA)\n",
    "                os.chdir(self.path3)\n",
    "                cv2.imwrite(i,resized)                  \n",
    "        os.chdir(self.path2)\n",
    "        \n",
    "    \n",
    "    def mask(self):\n",
    "        for i in os.listdir(self.path):\n",
    "            if i == '.ipynb_checkpoints':\n",
    "                continue\n",
    "            else:\n",
    "                os.chdir(self.path)\n",
    "                img = cv2.imread(i)\n",
    "                gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "                equalized = cv2.equalizeHist(gray_image)\n",
    "                \n",
    "                threshold_value, binary_image = cv2.threshold(equalized,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)    \n",
    "                kernel = cv2.getStructuringElement(shape=cv2.MORPH_ELLIPSE,ksize =(3,3))\n",
    "                img_erosion = cv2.erode(binary_image,kernel,iterations=1)\n",
    "                img_dilation = cv2.dilate(img_erosion,kernel,iterations=1)\n",
    "                opening = cv2.morphologyEx(img_dilation, cv2.MORPH_OPEN, kernel)\n",
    "                closing = cv2.morphologyEx(opening, cv2.MORPH_CLOSE, kernel)\n",
    "                os.chdir(self.path3)\n",
    "                cv2.imwrite(i,img_dilation)  \n",
    "        os.chdir(self.path2)\n",
    "   \n",
    "\n",
    "    def augmantation(self):\n",
    "        sayı = int(input(\"her resim üretim sayısı:\"))\n",
    "        for i in os.listdir(self.path):\n",
    "            if i == '.ipynb_checkpoints':\n",
    "                continue\n",
    "            \n",
    "            else:\n",
    "                os.chdir(self.path)\n",
    "                #kullanılan veri artırma tekniklerini bu şekilde tanımladım kullanıcıdan alınacak şekildede düzenlenebilir.\n",
    "                datagen = ImageDataGenerator(rotation_range=40,\n",
    "                             width_shift_range=0.2,\n",
    "                             height_shift_range=0.2,\n",
    "                             shear_range=0.2,\n",
    "                             zoom_range=0.2,\n",
    "                             horizontal_flip=True,\n",
    "                             vertical_flip=True,\n",
    "                             fill_mode=\"nearest\")\n",
    "                \n",
    "                img = load_img(i)\n",
    "                x = img_to_array(img)\n",
    "                x = x.reshape((1,)+x.shape)\n",
    "                \n",
    "                k = 0\n",
    "                for batch in datagen.flow(x,batch_size=1,save_to_dir=self.path3):\n",
    "                    k += 1\n",
    "                    if k == sayı:\n",
    "                        break\n",
    "                        \n",
    "    def equalize(self):\n",
    "        for i in os.listdir(self.path):\n",
    "            if i == '.ipynb_checkpoints':\n",
    "                continue\n",
    "                \n",
    "            else:\n",
    "                os.chdir(self.path)\n",
    "                img = cv2.imread(i)\n",
    "                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "                equalized = cv2.equalizeHist(gray)\n",
    "                os.chdir(self.path3)\n",
    "                cv2.imwrite(i,equalized)\n",
    "        os.chdir(self.path2)\n",
    "                \n",
    "                \n",
    "                  \n",
    "\n",
    "process = preprocess()\n",
    "\n",
    "while True:\n",
    "    print(\"\"\"\n",
    "    İŞLEMLER\n",
    "    q-çıkış\n",
    "    1-normalizasyon\n",
    "    2-gray conversion\n",
    "    3-resize\n",
    "    4-maskeleme\n",
    "    5-data augmantation\n",
    "    6-histogram\n",
    "    \"\"\")\n",
    "    \n",
    "    işlem = input(\"Lütfen yapmak istediğiniz işlemi seçin (1,2,3 vs):\")\n",
    "    \n",
    "    if işlem == \"q\":\n",
    "        break\n",
    "    \n",
    "    elif işlem == \"1\":\n",
    "        process.normalization()\n",
    "        \n",
    "    elif işlem == \"2\":\n",
    "        process.gray()\n",
    "        \n",
    "    elif işlem == \"3\":\n",
    "        process.resize()\n",
    "        \n",
    "    elif işlem == \"4\":\n",
    "        process.mask()\n",
    "        \n",
    "    elif işlem == \"5\":\n",
    "        process.augmantation()\n",
    "        \n",
    "    elif işlem == \"6\":\n",
    "        process.equalize()\n",
    "        \n",
    "   "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
